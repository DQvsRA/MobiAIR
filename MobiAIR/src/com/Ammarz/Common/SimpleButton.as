package com.Ammarz.Common {	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.MovieClip;		/* =======================================		A General Button controller		code by: Ammar Harfoush		ammar@ammarz.com		This code is only to be used within		the project it came with.		To use in other projects, please		contact me at the email above		or call me at: +971 50 4970858	==========================================*/		public class SimpleButton extends MovieClip{		public static const EVENT_ON_PUSH:String = "SimpleButtonOnPushEvent";		public static const B_SCALE:int = 0;		public static const B_FRAMES:int = 1;				private var _behavior:int;		private var _callback:Function;		private var _args:Object;		private var _sendDefaultEvent:Boolean;				private var _defaultScale:Number;		private var _pushScale:Number;		private var _overScale:Number;				private var _defaultFrame:uint;		private var _pushFrame:uint;		private var _overFrame:uint;				private var _mouseIsOver:Boolean;				private var _sendOnMouseUp:Boolean;				public function SimpleButton(behave:int = 0,callback:Function = null,args:Object = null,sendPushEvent:Boolean=true,sendOnMouseUp:Boolean = false) {			super();						if (behave == B_FRAMES)			{				stop();			}						_behavior = behave;			_callback = callback;			_args = args;			_sendDefaultEvent = sendPushEvent;			_sendOnMouseUp = sendOnMouseUp;			_mouseIsOver = false;						if (behave == B_SCALE)			{				_defaultScale = 1 * scaleX;				_pushScale = 0.9 * scaleX;				_overScale = 1.2 * scaleX;			}else if (behave == B_FRAMES)			{				_defaultFrame = 1;				_pushFrame = 2;				_overFrame = 3;			}						addEventListener(MouseEvent.MOUSE_DOWN,handleMouseDown,false,0,true);			addEventListener(MouseEvent.MOUSE_UP,handleMouseUp,false,0,true);			addEventListener(MouseEvent.MOUSE_OVER,handleMouseOver,false,0,true);			addEventListener(MouseEvent.MOUSE_OUT,handleMouseOut,false,0,true);		}				private function processClick():void		{			if (_callback != null)			{				_args ? _callback(_args) : _callback();			}		}				public function setupScales(defaultScale:Number = 1, pushScale:Number = 0.9, overScale:Number = 1.2):void		{			_defaultScale = defaultScale * scaleX;			_pushScale = pushScale * scaleX;			_overScale = overScale * scaleX;		}				public function setupFrames(defaultFrame:uint = 1, pushFrame:uint = 2, overFrame:uint = 3):void		{			_defaultFrame = defaultFrame;			_pushFrame = pushFrame;			_overFrame = overFrame;			gotoAndStop(defaultFrame);		}				public function setupCallback(callback:Function,args:Object = null):void		{			_callback = callback;			_args = args;		}				private function handleMouseDown(event:MouseEvent):void		{			if (_behavior == B_SCALE)			{				scaleX = _pushScale;				scaleY = _pushScale;			}else if (_behavior == B_FRAMES)			{				gotoAndStop(_pushFrame);			}						if (!_sendOnMouseUp)				processClick();		}						private function handleMouseUp(event:MouseEvent):void		{			if (_mouseIsOver)			{				handleMouseOver(null);			}else			{				handleMouseOut(null);			}			if (_sendOnMouseUp)				processClick();		}				private function handleMouseOver(event:MouseEvent):void		{			if (_behavior == B_SCALE)			{				scaleX = _overScale;				scaleY = _overScale;			}else if (_behavior == B_FRAMES)			{				gotoAndStop(_overFrame);			}			_mouseIsOver = true;		}				private function handleMouseOut(event:MouseEvent):void		{			if (_behavior == B_SCALE)			{				scaleX = _defaultScale;				scaleY = _defaultScale;			}else if (_behavior == B_FRAMES)			{				gotoAndStop(_defaultFrame);			}			_mouseIsOver = false;		}			}	}